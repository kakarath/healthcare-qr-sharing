name: Healthcare QR - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Run tests
        run: mvn clean test

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build for analysis
        run: mvn clean compile -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  mobile-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # Install Docker Compose before using it
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create .env file
        run: |
          cat > .env << EOF
          POSTGRES_DB=healthcare
          POSTGRES_USER=healthcare_user
          POSTGRES_PASSWORD=healthcare_pass
          ENCRYPTION_KEY=$(openssl rand -base64 32)
          JWT_SECRET=$(openssl rand -base64 64)
          DEFAULT_USER_PASSWORD=testpass123
          DEFAULT_PROVIDER_PASSWORD=providerpass123
          FHIR_SERVER_URL=https://hapi.fhir.org/baseR4
          OAUTH_ISSUER_URI=https://auth.example.com
          SPRING_PROFILES_ACTIVE=docker
          EOF

      - name: Start test environment
        run: |
          docker-compose up -d --build

      - name: Wait for application startup
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f --silent http://localhost:8080/api/health > /dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i/30: Application not ready, waiting 5 seconds..."
            sleep 5
          done
          
          # Final check
          if ! curl -f http://localhost:8080/api/health; then
            echo "Application failed to start within 150 seconds"
            docker-compose logs
            exit 1
          fi

      - name: Run mobile tests
        run: |
          echo "Running mobile integration tests..."
          
          # Test health endpoint
          curl -f http://localhost:8080/api/health
          
          # Test QR generation (simplified - no auth required for CI)
          curl -X POST http://localhost:8080/api/qr/generate \
            -H "Content-Type: application/json" \
            -d '{"purpose": "Mobile CI/CD test"}' \
            --fail --show-error

      - name: Show application logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Services ==="
          docker-compose ps
          echo "=== Application Logs ==="
          docker-compose logs app
          echo "=== Database Logs ==="
          docker-compose logs db
          echo "=== Docker Images ==="
          docker images
          echo "=== System Resources ==="
          df -h
          free -h

      - name: Cleanup
        if: always()
        run: docker-compose down -v